package org.apache.maven;

import java.io.File;
import java.util.*;

public class RealWorldChinesePostman {
    private int N; // Número de cruzamentos (vértices)
    private int[][] arcos; // Matriz de adjacência para contagem de ruas entre cruzamentos
    private float[][] custos; // Custos das ruas (distância entre cruzamentos)
    private String[][] nomesRuas; // Nome das ruas entre cruzamentos
    private APIClient apiClient;
    private List<double[]> cruzamentos; // Lista de cruzamentos como coordenadas GPS
    private List<double[]> percurso; // Coordenadas do percurso calculado

    public RealWorldChinesePostman() {
        this.arcos = null;
        this.custos = null;
        this.nomesRuas = null;
        this.cruzamentos = new ArrayList<>();
        this.percurso = new ArrayList<>();
        this.apiClient = new APIClient();
    }

    public void adicionarCruzamento(double[] coordenadas) {
        cruzamentos.add(coordenadas);
    }

    public void descobrirCruzamentosPorRaio(String enderecoInicial, double raio) {
        try {
            // Converter o endereço inicial para coordenadas
            double[] coordenadasIniciais = APIClient.getCoordinates(enderecoInicial);
    
            // Obter ruas e nós no raio especificado
            Map<Long, List<Object>> streetDataMap = APIClient.getStreetsWithNodes(coordenadasIniciais[0], coordenadasIniciais[1], raio);
    
            // Obter interseções baseadas nos dados das ruas
            Set<String> intersections = APIClient.getIntersections(streetDataMap);
    
            System.out.println("\nInterseções encontradas:");
            for (String intersection : intersections) {
                System.out.println(intersection);
    
                // Extraindo o ID do nó da string de interseção
                Long nodeId = extractNodeId(intersection);
                if (nodeId != null) {
                    // Obter coordenadas do nó usando getNodeCoordinates
                    double[] coordenadas = APIClient.getNodeCoordinates(nodeId);
                    if (coordenadas != null) {
                        cruzamentos.add(coordenadas);
                    }
                }
            }
    
            // Inicializar matrizes com base no número de cruzamentos encontrados
            this.N = cruzamentos.size();
            this.arcos = new int[N][N];
            this.custos = new float[N][N];
            this.nomesRuas = new String[N][N];
    
            System.out.println("Cruzamentos descobertos: " + N);
        } catch (Exception e) {
            System.err.println("Erro ao descobrir cruzamentos: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    // Método auxiliar para extrair o ID do nó da string de interseção
    private Long extractNodeId(String intersection) {
        try {
            String idPart = intersection.split(":")[1].trim().split(" ")[0];
            return Long.parseLong(idPart);
        } catch (Exception e) {
            System.err.println("Erro ao extrair ID do nó: " + e.getMessage());
            return null;
        }
    }

    public void adicionarRua(int origem, int destino) {
        double[] pontoOrigem = cruzamentos.get(origem);
        double[] pontoDestino = cruzamentos.get(destino);

        // Obter a distância real usando APIClient
        float distancia = apiClient.getDistance(pontoOrigem[0], pontoOrigem[1], pontoDestino[0], pontoDestino[1]);

        // Obter o nome da rua usando APIClient
        String nomeRua = apiClient.getStreetName(pontoOrigem[0], pontoOrigem[1], pontoDestino[0], pontoDestino[1]);

        // Adicionar o arco (rua) ao grafo
        arcos[origem][destino]++;
        custos[origem][destino] = distancia;
        nomesRuas[origem][destino] = nomeRua;
    }

    public List<double[]> resolverProblema() {
        // Passo 1: Determinar desequilíbrios (delta) dos vértices
        int[] delta = new int[N]; // Delta de cada vértice
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                delta[i] -= arcos[i][j]; // Saída do vértice
                delta[j] += arcos[i][j]; // Entrada no vértice
            }
        }
    
        // Identificar vértices com desequilíbrios
        List<Integer> positivos = new ArrayList<>();
        List<Integer> negativos = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            if (delta[i] > 0) positivos.add(i); // Excesso de entrada
            else if (delta[i] < 0) negativos.add(i); // Excesso de saída
        }
    
        // Passo 2: Resolver desequilíbrios como problema de fluxo de custo mínimo
        int[][] novoGrafo = new int[N][N]; // Grafo balanceado
        float[][] novoCusto = new float[N][N]; // Custos balanceados
    
        // Copiar os arcos existentes para o novo grafo
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                novoGrafo[i][j] = arcos[i][j];
                novoCusto[i][j] = custos[i][j];
            }
        }
    
        // Resolver desequilíbrios adicionando arestas fictícias ao menor custo
        while (!positivos.isEmpty() && !negativos.isEmpty()) {
            int u = positivos.get(0); // Vértice positivo
            int v = negativos.get(0); // Vértice negativo
            int quantidade = Math.min(delta[u], -delta[v]); // Quantidade de fluxo a ajustar
    
            // Encontrar menor custo entre u e v usando Floyd-Warshall
            float menorCusto = Float.MAX_VALUE;
            int intermediario = -1;
            for (int k = 0; k < N; k++) {
                if (custos[u][k] + custos[k][v] < menorCusto) {
                    menorCusto = custos[u][k] + custos[k][v];
                    intermediario = k;
                }
            }
    
            // Adicionar arco fictício com menor custo
            if (intermediario != -1) {
                novoGrafo[u][intermediario] += quantidade;
                novoGrafo[intermediario][v] += quantidade;
                novoCusto[u][intermediario] = menorCusto / 2; // Dividir custo igualmente
                novoCusto[intermediario][v] = menorCusto / 2;
            }
    
            // Ajustar os deltas
            delta[u] -= quantidade;
            delta[v] += quantidade;
    
            // Remover vértices balanceados das listas
            if (delta[u] == 0) positivos.remove(0);
            if (delta[v] == 0) negativos.remove(0);
        }
    
        // Passo 3: Construir o ciclo Euleriano no grafo balanceado
        List<Integer> cicloEuleriano = encontrarCicloEuleriano(novoGrafo);
    
        // Converter os índices para coordenadas GPS
        List<double[]> percursoCoordenadas = new ArrayList<>();
        for (int indice : cicloEuleriano) {
            percursoCoordenadas.add(cruzamentos.get(indice));
        }
    
        return percursoCoordenadas;
    }
    
    // Método auxiliar: Encontra um ciclo Euleriano no grafo dado
    private List<Integer> encontrarCicloEuleriano(int[][] grafoBalanceado) {
        List<Integer> ciclo = new ArrayList<>();
        Stack<Integer> pilha = new Stack<>();
        int[] grauAtual = new int[N];
    
        // Inicializa o grau atual com os arcos no grafo balanceado
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                grauAtual[i] += grafoBalanceado[i][j];
            }
        }
    
        // Começa pelo primeiro vértice
        pilha.push(0);
    
        while (!pilha.isEmpty()) {
            int atual = pilha.peek();
            boolean encontrouAresta = false;
    
            for (int i = 0; i < N; i++) {
                if (grafoBalanceado[atual][i] > 0) {
                    pilha.push(i);
                    grafoBalanceado[atual][i]--; // Remove a aresta utilizada
                    encontrouAresta = true;
                    break;
                }
            }
    
            if (!encontrouAresta) {
                ciclo.add(pilha.pop());
            }
        }
    
        // O ciclo pode estar invertido, então invertemos para a ordem correta
        Collections.reverse(ciclo);
        return ciclo;
    }

    public String gerarUrlCaminhoCompleto() {
        // Obter o percurso como lista de coordenadas
        List<double[]> coordenadasPercurso = resolverProblema();
    
        // Gerar a URL do percurso usando a APIClient
        return APIClient.buildDirectionsUrl(coordenadasPercurso);
    }

    // Gera o mapa do trajeto usando o método drawRoute da APIClient
    public void desenharPercurso() {
        if (percurso == null || percurso.isEmpty()) {
            System.out.println("Nenhum percurso calculado para desenhar.");
            return;
        }

        try {
            String outputPath = "percurso.html"; // Caminho do arquivo HTML de saída
            APIClient.drawRoute(percurso, outputPath);

            // Abrir o mapa gerado no navegador padrão
            File htmlFile = new File(outputPath);
            if (htmlFile.exists()) {
                java.awt.Desktop.getDesktop().browse(htmlFile.toURI());
                System.out.println("Mapa gerado com sucesso e aberto no navegador.");
            } else {
                System.out.println("Falha ao abrir o mapa gerado.");
            }
        } catch (Exception e) {
            System.err.println("Erro ao desenhar o percurso: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        RealWorldChinesePostman problema = new RealWorldChinesePostman();

        // Obter o endereço inicial e o raio
        System.out.print("Digite o endereço inicial: ");
        String enderecoInicial = scanner.nextLine();
        System.out.print("Digite o raio em metros para buscar cruzamentos: ");
        double raio = scanner.nextDouble();

        // Descobrir cruzamentos
        problema.descobrirCruzamentosPorRaio(enderecoInicial, raio);

        // Adicionar ruas automaticamente (exemplo: todos conectados a todos)
        for (int i = 0; i < problema.N; i++) {
            for (int j = i + 1; j < problema.N; j++) {
                problema.adicionarRua(i, j);
            }
        }

        // Resolver o problema
        System.out.println("Percurso encontrado: ");

        // Gerar e exibir a URL do percurso completo
        String urlCaminho = problema.gerarUrlCaminhoCompleto();
        System.out.println("URL do percurso completo no Google Maps: " + urlCaminho);

        scanner.close();
    }
}